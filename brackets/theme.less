// Copyright (c) 2014 - present Adobe Systems Incorporated. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// Style definitions are from
// https://github.com/chriskempson/tomorrow-theme/tree/master/Brackets

/*
 * Brackets Default Theme
 *
 * Defines all the variables that one can configure in a theme. This should
 * contain all variables / mixins for UI styling that we want to be able to
 * change in a theme.
 *
 * Throughout the rest of the LESS files we should _only_ use color
 * variable names that are on the LHS of the list below. So, if we
 * need a new color for some UI element, we should add a variable
 * in this file.
 */

/* Define some variables used in multiple places */

@background: #10111e;   // very dark gray
@foreground: #f2f2f2;   // very light gray / white

@strings: #d89333;      // orange
@attributes: #afd600;   // light olive
@properties: #d56bef;   // violet
@variables: #f2f2f2;    // foreground
@highlight: #0050a0;    // medium blue
@comments: #808080;     // medium gray



@gray-medium: #767676;



@white: #fff;
@gray-light: #c5c8c6;
@slate: #333f48;
@gray-dark: #2f2f2f;
@black: #000;

@pink: #d85896;

@orange2: #f6a644;
@orange-dark: #ff0000;

@canary: #d3cd69;

@olive-light: #afd600;
@olive-dark: #2e5c00;

@blue-light: #6c9ef8;
@blue-pale: #797edd;
@blue-medium: #0050a0;

@purple: #ac2aff;

@foldgutter-open: #666;
@foldgutter-folded: #aaa;
@foldgutter-open: #888;
@foldmarker: #ccc;
@foldmarker-back: #444;


@red: #ff0000;
@yellow: #ffff00;



/* Code Styling */

// viewport text & background

.CodeMirror, .CodeMirror-scroll {
    color: @foreground;
    background-color: @background;
}

// Unknown element

.CodeMirror-focused .CodeMirror-activeline-background {
    background: @foreground; // unknown
}

// Unknown element

.show-line-padding .CodeMirror-focused .CodeMirror-activeline-background {
    box-shadow: inset 15px 0 0 0 @black;
}

// Unknown element


.CodeMirror-focused .CodeMirror-activeline {
    .CodeMirror-gutter-elt {
        background: rgba(0, 0, 0, 0.2);
        color: @foreground;
    }
    .inline-widget .CodeMirror-gutter-elt {
        color: @gray-medium;
    }
}

 // strings

.cm-atom, .cm-string, .cm-string-2, .cm-hr {color: @strings;}

// numbers & atributes

.cm-number, .cm-attribute, .cm-plus {color: @attributes;}

// definitions  & properties

.cm-def, .cm-property {color: @properties;}

// variables

.cm-variable, .cm-variable-2, .cm-variable-3, .cm-operator, .cm-meta, .cm-bracket {color: @variables;}

// comments

.cm-comment {color: @comments;}


.cm-error, .cm-minus {color: @orange-dark;}
.cm-header {color: @pink;}
.cm-link {color: @purple; text-decoration: none;}
.cm-rangeinfo {color: @blue-pale;}
.cm-keyword, .cm-qualifier, .cm-builtin, .cm-tag, .cm-quote {color: @blue-light;}

/* Extra CSS */

.CodeMirror-searching {
    background-color: @canary;
    &.searching-current-match {
        background-color: @orange2;
    }
}


.CodeMirror-cursor {
    border-left: 1px solid @gray-light !important;
}

.CodeMirror-gutters {
    background-color: @background;
    border-right: none;
}

.CodeMirror-linenumber {
    color: @gray-medium;
}

.CodeMirror .CodeMirror-selected {
    background: @slate;
}

// highlighted / selected text

.CodeMirror-focused .CodeMirror-selected {
    background: @highlight;
}

.CodeMirror-matchingbracket, .CodeMirror-matchingtag {
    /* Ensure visibility against gray inline editor background */

    /* Highlight atching tags & brackets*/

    background-color: @yellow;
    color: @black !important;
}

.CodeMirror-overwrite .CodeMirror-cursor {
    border-left: none !important;
    border-bottom: 1px solid @white;
}

/*
    CodeMirror's use of descendant selectors for certain styling causes problems when editors are
    nested because, for items in the inner editor, the left-hand clause in the selector will now
    match either the actual containing CodeMirror instance *OR* the outer "host" CodeMirror instance.

    TODO (issue #324): We'll still have problems if editors can be nested more than one level deep,
    or if any other descendant-selector-driven CM styles can differ between inner & outer editors
    (potential problem areas include line wrap and coloring theme: basically, anything in codemirror.css
    that uses a descandant selector where the CSS class name to the left of the space is something
    other than a vanilla .CodeMirror)
 */

.CodeMirror {
    .CodeMirror {
        background: transparent;
    }

    .CodeMirror .CodeMirror-gutters {
        background: transparent;
        border-right: none;
    }

    .CodeMirror .CodeMirror-activeline-background {
        background: transparent;
    }

    .CodeMirror .CodeMirror-activeline .CodeMirror-gutter-elt {
        background: transparent;
        color: @gray-medium;
    }

    .CodeMirror-focused .CodeMirror-activeline-background {
        background: @gray-dark;
    }

    .CodeMirror-focused .CodeMirror-activeline {
        .CodeMirror-gutter-elt {
            background: rgba(0, 0, 0, 0.2);
            color: @white;
        }
    }
}

.CodeMirror-foldgutter-open:after {
    color: @foldgutter-open;
}
.CodeMirror-foldgutter-folded:after {
    color: @foldgutter-folded;
}

.CodeMirror.over-gutter, .CodeMirror-activeline {
    .CodeMirror-foldgutter-open:after {
        color: @foldgutter-open;
    }
}

.CodeMirror-foldmarker {
    border-color: @black;
    color: @foldmarker;
    background-color: @foldmarker-back;
}

/* Non-editor styling */

.image-view,
.not-editor {
    background-color: @background;
}

.view-pane .image-view {
    color: @foreground;
}
